/******************************************************/
/*********** class cam-server.c start *****************/
/******************************************************/
/************* libraries start **************/
#include <syslog.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <fcntl.h> // for open
#include <pthread.h>
#include <capture.h>
#include <unistd.h>
#include <errno.h>
#include <time.h>
#include <sys/time.h>
#include "cam_server.h"
#include <capture.h>
#include <time.h>
/************* libraries end ****************/





/************* variables start **************/
//to store received messages from client
char client_message[2000];

//used to store welcome message to client
char buffer[1024];

//mutex to be locked and unlocked
pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
/************* variables end ****************/





/******************************************************/
/****************** functions start *******************/
/******************************************************/

//main start up fuction before starting any client thread
int start_up_server(void)
{
	//intialize the log to write onto it
	openlog ("server", LOG_CONS | LOG_PID | LOG_NDELAY, LOG_LOCAL1);
	//message onto server log
	syslog(LOG_INFO, "Server running...");

	//variables for the socket
	int 			serverSocket, newSocket;
	struct 			sockaddr_in serverAddr;
	struct 			sockaddr_storage serverStorage;
	socklen_t 		addr_size;

	//Create the socket.
	serverSocket = socket(PF_INET, SOCK_STREAM, 0);

	// Configure settings of the server address struct
	// Address family = Internet
	serverAddr.sin_family = AF_INET;

	//Set port number, using htons function to use proper byte order
	serverAddr.sin_port = htons(55752);

	//Set IP address to localhost
	serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);

	//Set all bits of the padding field to 0
	memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);

	//Bind the address struct to the socket
	bind(serverSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr));

	//Listen on the socket, with 40 max connection requests queued
	if(listen(serverSocket,50)==0)
		syslog(LOG_INFO, "Listening\n");

	else
		syslog(LOG_INFO, "not Listening\n");

	pthread_t tid[60];
	int i = 0;
	int isMore = 1;
	while(isMore)
	{
		//Accept call creates a new socket for the incoming connection
		addr_size = sizeof serverStorage;
		newSocket = accept(serverSocket, (struct sockaddr *) &serverStorage, &addr_size);

		//for each client request creates a thread and assign the client request to it to process
		//so the main thread can entertain next request
		if( pthread_create(&tid[i], NULL, socketThread, &newSocket) != 0 )
			syslog(LOG_INFO, "Failed to create thread \n");
        
            	i++;

		//stop the shile loop when reaching 50 clients
		if( i > 50)
            		isMore = 0;
	}
	
	return 0;
}




//function called each time for new client with a new thread
void * socketThread(void *arg)
{
	//the incoming socket-integer
	int newSocket = *((int *)arg);
	//to store char-messages
	char *msg;
	//generate XOR-key for this this thread
	int xor_key = gen_XORkey();
	//to stor the rsa-encrypted XOR-key
	char char_rsa[1000];
	//to store the real generated XOR-key-integer
	char xor[5];
	//media stream to get stream from the camera holding this server
	media_stream *stream;
	//media fram to get the frame from the stream
	media_frame  *frame;
	//array to store image data coming from the frame
	char     *data;
	//the size of the image or the image data array
	size_t   img_size;
	//used in a while loop to stop the loop when value is '0'
	int is_stop_requested = 1;

	int val = 0;
	//used to be compared to from a message from client
	char stop_arr[5] = "stop";

	//following 2 rec will receive the two public keys from the client upon thread start
	//receive message from client and stor it in client_message
	recv(newSocket , client_message , 2000 , 0);
	long long int n = atoi(client_message);
	recv(newSocket , client_message , 2000 , 0);
	long long int e = atoi(client_message);

	//with 'n' och 'e' the generated XOR-key will be rsa-encrypted
	//fmod and pow are used for the rsa-encryption
	long long int rsa_encr_xor = ( fmod( pow( xor_key, e) , n ) );

	//converting the encrypted integer to char array
	sprintf(char_rsa, "%lld", rsa_encr_xor);

	//Sending the encrypted xor-key-char-array to client
	write(newSocket, char_rsa, strlen(char_rsa));   
	//needed to signal end of sending procedure
	write(newSocket, "\n", strlen("\n"));

	//converting the XOR-key-integer to char array
	sprintf(xor, "%d", xor_key);


	//Get all available resolutions on the camera
	//and stor it in msg char array
	msg = capture_get_resolutions_list(0);  

	//the length of the message
	int msg_size_1 = strlen(msg); 

 	//encrypting the resolutions and restoring in same variable 'msg'
	msg = encrypt_char(msg, xor, strlen(msg));

	//Send the encrypted resolutions to the client
	write(newSocket,  msg, msg_size_1);   
	write(newSocket, "\n", strlen("\n"));   


	//Clear/empty the msg variable
	memset(msg, 0, strlen(msg));  
	
	//receiving the encrypted chosen resolution and frequency
	//storing in the char array of client_message
	recv(newSocket , client_message , 2000 , 0);

	
	//Opens a stream to the camera to get the img
	//puting in as parameter the decrypted version of the client message
	stream = capture_open_stream(IMAGE_JPEG, encrypt_char(client_message, xor, strlen(client_message))); 



	//looping to send images to client in a loop
	while(is_stop_requested) {
		frame = capture_get_frame(stream);    

		//Get image data
		data = capture_frame_data(frame);  

		//Get the image size
		img_size  = capture_frame_size(frame);    

		//Convert the image size to a char * to send to the client
		sprintf(msg,"%zu\n",img_size); 

		//Send the size to the client   
		write(newSocket, msg, strlen(msg));      

		data = encrypt_char(data, xor, img_size);

		//Send the image data to the client
		int error = write(newSocket, data, img_size);

		//Checking if the write failed
		//Might then be that the client is disconnected, so we break out of the loop
		if (error < 0)
			syslog(LOG_INFO, "Client is disconnected");

		//Emptying the variables to be sure nothing is stored 
		memset(data, 0, sizeof(data));
		capture_frame_free(frame);
	}

	//Send message to the client socket
	//pthread_mutex_lock  locks the given mutex. If the mutex is
        //currently unlocked, it becomes locked  and  owned  by  the
        //calling  thread,  and  pthread_mutex_lock  returns immedi-
        //ately. If the mutex is already locked by  another  thread,
        //pthread_mutex_lock  suspends  the calling thread until the
        //mutex is unlocked.
	pthread_mutex_lock(&lock);
	char *message = malloc(sizeof(client_message)+20);
	strcpy(message,"Hello Client : ");
	strcat(message,client_message);
	strcat(message,"\n");
	strcpy(buffer,message);
	free(message);
	pthread_mutex_unlock(&lock);
	sleep(1);
	send(newSocket,buffer,50,0);

	syslog(LOG_INFO, buffer);
	syslog(LOG_INFO, "Exit socketThread\n");
	close(newSocket);
	pthread_exit(NULL);
}



//function to encrypt and decrypt with an XOR-key
char *encrypt_char(char *message, char *key, int img_size){

   int key_length = strlen(key);
   char* encrypt_msg = malloc(img_size+1);
   int i;
   //the 48 is used for the ASCI-table values	
   for ( i = 0; i< img_size; i++){
       encrypt_msg[i] = message[i] ^( key[i%key_length]-48); 
   }
   encrypt_msg[img_size]='\0';
   return encrypt_msg;
}




//function to randomly generate and XOR-key
int gen_XORkey(void){
	//setting up the 'rand()'-function
	srand(time(0));
	//getting a random integer between 10 and max 99
    	int nbr = (rand()%99)+10;
    	return nbr;
}
/******************************************************/
/****************** functions end *********************/
/******************************************************/
/******************************************************/
/******************************************************/
/******************************************************/
/*********** class cam-server.c end *******************/
/******************************************************/



